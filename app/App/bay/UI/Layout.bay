namespace App.UI;

use Runtime.CoreStruct;
use Runtime.MessageRPC;
use Runtime.RuntimeUtils;
use Runtime.Web.Component;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderHelper;
use Runtime.Web.Events.Mouse.MouseClickEvent;


class Layout extends Component
{	
	
	/**
	 * Returns module name
	 */
	lambda string moduleName() => "App";
	
	
	
	/**
	 * Required components
	 */
	lambda Collection<string> components() => null;
	
	
	
	/**
	 * Component css
	 */
	lambda string css(Dict<string> vars) => 
		@css{
			*{box-sizing: border-box;}body{margin:0;padding:0;}
			a { text-decoration: inherit; color: #0000d0; cursor: pointer; }
			a:hover, a:visited:hover { text-decoration: underline; color: red; }
			a:visited { text-decoration: inherit; color: #0000d0; }
			a.link { text-decoration: none; color: #0000d0; cursor: pointer; }
			a.link:hover, a.link:visited:hover { text-decoration: underline; color: red; }
			a.link:visited { text-decoration: none; color: #0000d0; }
			body, html{
				font-family: 'Ubuntu', sans-serif;
				font-size: 14px;
				width: 100%;
				padding: 0;
				margin: 0;
			}
			%section{
				max-width: 1200px;
				margin-left: auto;
				margin-right: auto;
			}
		}
	;
	
	
	
	/**
	 * Component render
	 */
	lambda html render(LayoutModel layout, LayoutModel model, Dict params, html content)
	{
		string class_name = model.page_class;
		return
			<section @class='content' @key='content'>
				<div @class='section'>
					<{class_name} @bind="page_model" @key="page"></{class_name}>
				</div>
			</section>
		;
	}
	
}